{"version":3,"sources":["components/test.js","components/header.js","components/calculateScore.js","components/calculateDisplayValue.js","components/gameTile.js","components/board.js","components/plotScatter.js","components/plotHorizontalBar.js","components/tabs.js","components/icon.js","components/gameControl.js","components/dashboard.js","components/game.js","index.js"],"names":["Test","isNoTest","className","allNames","join","num","name","this","status","length","testName","testStatus","testStates","all","matchFound","forEach","testMatch","find","test","map","React","Component","Header","href","calculateScore","value","calculateDisplayValue","GameTile","extraClass","score","props","gameOver","isType","type","baseValue","moveValue","overlayValue","removeValue","moveDir","animateDirClass","baseTile","renderStaticTile","moveTile","overlayTile","removeTile","moreClass","getClassName","renderDisplay","renderScore","debug","doAnimations","renderAnimatedTile","animateDirection","Board","direction","row","col","maxRow","maxCol","currState","prevState","reverseDirection","movePos","extraContent","currTile","gameTiles","prevTile","prevMove","moveTiles","searchRow","searchCol","animateUndo","isBaseCase","currMove","currMoveSearch","prevTileSearch","extraText","key","currentState","previousState","x","rowNum","y","colNum","getUndoTileValues","getTileValues","Math","random","PlotScatter","markers","maxNumMarkers","skipLabel","div","floor","Array","fill","i","minSize","maxSize","numPoints","plotWidth","radius","min","max","svgWidth","svgHeight","yLabelWidth","dataScatter","dataBar","plotHeight","plotDataHeight","xAxisMarkers","yAxisMarkers","yAxisMarkersSubset","getMarkersSubset","xAxisMarkersSubset","viewBox","xPlotWidth","xPlot","yPlot","rPlot","scatterPlotSize","transform","d","cx","cy","r","x1","y1","x2","y2","dy","xAxisLabels","xLabelHeight","yAxisLabels","width","height","PlotHorizontalBar","data","dataLabels","axisMarkers","axisUnit","position","maxBarWidth","scaledNum","values","label","labelWidth","Tabs","state","currentTab","title","content","drawNewTiles","drawMoves","count","history","slice","stepNumber","move","scaledCount","sum","newTiles","nextTile","maxValues","xAxisTitle","yAxisTitle","newTab","setState","classNames","onClick","onTabClick","tabNum","items","classTabButtons","renderTabButton","renderContent","Icon","iconName","optClass","undefined","pathName","xlinkHref","GameControl","shortcut","featherName","dir","disabled","possibleMove","showKeyboardShortcuts","keyboardShortcut","Dashboard","nextTileValue","a","b","scorePrint","reduce","toLocaleString","possibleMoves","iconVisible","toggleView","undoClick","restartClick","current","renderStatus","controllerClick","renderUndo","renderToggleShortcuts","renderRestart","Mousetrap","require","Game","getStartTiles","createArray","round","prevStepNumber","startValues","iters","randomizeTiles","startArray","isEven","shuffle","maxCurrentTile","nullTiles","push","pos","moves","up","right","down","left","Object","every","checkState","loopNum","lastLoop","miniTiles","newCurrTile","newPrevTile","movement","gameLogic","numRows","numCols","nextState","movementPossible","moveLogic","allPossibleMoves","newGameTiles","getNextTile","concat","bind","handleClick","handleUndoClick","stepNum","prevStepNum","drawUndo","handleKeypress","handleRestartClick","arr","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.db43e120.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class Test extends React.Component {\n\n  static status() {\n    return [];\n  }\n\n  static all() {\n    return [{\n      num: 0,\n      name: 'noNewTiles',\n    },{\n      num: 1,\n      name: 'allOnes',\n    },{\n      num: 2,\n      name: 'displayScores'\n    },{\n      num: 3,\n      name: 'showTileLogic'\n    },{\n      num: 4,\n      name: 'noMovesLeft'\n    },{\n      num: 5,\n      name: 'largeStartValues'\n    }];\n  }\n\n  static isNoTest() {\n    return this.status().length === 0;\n  }\n\n  static isType(testName) {\n    const testStatus = this.status();\n    const testStates = this.all();\n    let matchFound = false;\n    if (testStatus.length === 0) {\n      return false;\n    } else {\n      testStatus.forEach((num) => {\n        let testMatch = testStates.find((test) => test.num === num);\n        if (testMatch && (testMatch.name === testName)) {\n          matchFound = true;\n        }\n      });\n      return matchFound;\n    }\n  }\n\n  static allNames() {\n    const testStates = this.all();\n    let allNames = this.status().map((num) => {\n      let testMatch = testStates.find((test) => test.num === num);\n      return testMatch.name;\n    });\n    return allNames;\n  }\n\n  render () {\n    const testInfo = Test.isNoTest() ?\n      null :\n      <p className='Test'><strong>Test Mode:</strong> {Test.allNames().join(', ')}</p>;\n    return testInfo;\n  }\n}\n","import React from 'react';\nimport Test from './test.js';\n\nexport default function Header() {\n\n  return (\n    <header className='Header'>\n      <h1>Trois</h1>\n      <p>\n        A React.js implementation and adaptation of <a href='http://asherv.com/threes/'>Threes!</a>, the <a href='https://itunes.apple.com/us/app/threes/id779157948?mt=8'>iOS puzzle game</a>.\n      </p>\n      <p>\n        Created by <a href='https://www.laurennishizaki.com'>Lauren Nishizaki</a>.\n      </p>\n      <Test />\n    </header>\n  );\n}\n","export default function calculateScore(value) {\n  if (value === null) {\n    return null;\n  } else {\n    return ((value === 0) || (value === 1)) ? 0 : 3 ** (value - 1);\n  }\n}\n","export default function calculateDisplayValue(value) {\n  if (value === null) {\n    return null;\n  } else {\n    return ((value === 0 || value === 1) ? value + 1 : (3 * 2** (value-2)));\n  }\n}\n","import React from 'react';\nimport calculateScore from './calculateScore.js';\nimport calculateDisplayValue from './calculateDisplayValue.js';\nimport Test from './test.js';\n\nexport default class GameTile extends React.Component {\n  // props:\n  // - value = null / 0 / 1 / 2 / ...\n  // - gameOver = true / false\n  // - type = 'nextTile' / 'gamePiece' / 'background'\n  // - prevValue = null / 0 / 1 / 2 / ...\n  //      value of tile originally at location, only applicable if 2 tiles will add\n  //      if prevValue = 3, then assume tile that moves has value = 3, and props.value = 6\n  // - animateDirection = null / 'up' / 'right' / 'down' / 'left'\n  //      movement for tile to get from prev state to curr state\n  // - doAnimations = true / false\n\n  getClassName(value, extraClass) {\n    const className = 'game-tile game-tile-value-' + value;\n    return (extraClass ? (className + ' ' + extraClass) : className);\n  }\n\n  renderDisplay(value) {\n    if (value === null) {\n      return null;\n    } else {\n      return (<span>{calculateDisplayValue(value)}</span>);\n    }\n  }\n\n  renderScore(value) {\n    const score = calculateScore(value);\n    if ((this.props.gameOver || Test.isType('displayScores')) &&\n        (this.props.type !== 'nextTile') &&\n        (score !== null)) {\n      return (<span className='score'>{score}</span>);\n    } else {\n      return null;\n    }\n  }\n\n  renderAnimatedTile(baseValue, moveValue, overlayValue, removeValue, moveDir) {\n    const animateDirClass = 'animate-' + moveDir;\n    const animateDelayClass = 'animate-delay';\n    const animateRemoveClass = 'animate-remove';\n    const baseClass = 'no-animate';\n\n    const baseTile = (baseValue === null) ? null : this.renderStaticTile(baseValue, baseClass);\n    const moveTile = (moveValue === null) ? null : this.renderStaticTile(moveValue, animateDirClass);\n    const overlayTile = (overlayValue === null) ? null : this.renderStaticTile(overlayValue, animateDelayClass);\n    const removeTile = (removeValue === null) ? null : this.renderStaticTile(removeValue, animateRemoveClass);\n\n    return (\n      <div className='GameTile animatedGroup'>\n        {baseTile}\n        {moveTile}\n        {overlayTile}\n        {removeTile}\n      </div>\n    );\n  }\n\n  renderStaticTile(value, moreClass) {\n\n    return (\n      <div className={this.getClassName(value, moreClass)}>\n        {this.renderDisplay(value)}\n        {this.renderScore(value)}\n        {Test.isType('showTileLogic') ? this.props.debug : null}\n      </div>\n    );\n  }\n\n  render() {\n    if (this.props.type === 'background') {\n      return (\n        <div className='GameTile background'>\n        </div>\n      );\n    } else if (this.props.doAnimations) {\n      return this.renderAnimatedTile(this.props.baseValue,\n                                     this.props.moveValue,\n                                     this.props.overlayValue,\n                                     this.props.removeValue,\n                                     this.props.animateDirection);\n    } else {\n      return this.renderStaticTile(this.props.value, 'GameTile');\n    }\n  }\n}\n\n/*\n# Proposed edits:\n\n- make GameTile have state\n- prev value (only given if 2 tiles will add together at this location)\n  - you can assume that if this value is set, then at the start of animation,\n    the tile at this location and the tile moving into the location have the same value.\n  - this value will be replaced with curr value once the animation concludes\n- curr value\n- direction of movement (to animate curr value)\n- animated (?) (boolean)\n\nif direction is null, then the tile will fade in (not slide in)\nif direction is 'none', then no animation\n\n# Types of movements:\n- tile slides in\n- tile adds with current value to produce new tile\n- random new tile is added to the board (fade in)\n\nall movements are relative to the final position of the tile.\n\n## Tile adds\n- create 2 divs, both styled as tiles\n- 1 div is still (main position), the other slides in from a particular direction\n- when the 2 divs stack, the top (visible) one displays the new value\n- when the board redraws, the 2 stacked divs are replaced with a single div\n\n# Other notes\n\n- allow user to adjust speed of animation (slider?)\n  - this requires being able to edit CSS speed transition value from React state\n\n*/\n","import React from 'react';\nimport GameTile from './gameTile.js';\n\nexport default class Board extends React.Component {\n  // props:\n  // - currentState\n  // - previousState\n  // - gameOver={possibleMoves.gameOver}\n  // - doAnimations={this.state.doAnimations}\n  // - animateUndo\n\n  // state.gameTiles = game board\n  // state.moveTiles = which tiles moved to produce .gameTiles\n  // state.movePos = direction of movement\n  // if there is no later/earlier state, then currentState_P1/_M1 = null\n\n  reverseDirection(direction) {\n    switch (direction) {\n      case 'up':\n        return 'down';\n      case 'right':\n        return 'left';\n      case 'down':\n        return 'up';\n      case 'left':\n        return 'right';\n      default:\n        return null;\n    }\n  }\n\n  getUndoTileValues(row, col, maxRow, maxCol, currState, prevState) {\n    const moveDir = this.reverseDirection(prevState.movePos);\n    let [baseValue, moveValue, overlayValue, removeValue] = [null, null, null, null];\n    let extraContent = 'undo;';\n\n    const currTile = currState.gameTiles[row][col];\n    const prevTile = prevState ? prevState.gameTiles[row][col] : null;\n    const prevMove = prevState.moveTiles[row][col];\n\n    if (prevMove === 'new') {\n      extraContent += 'new-R;';\n      removeValue = prevTile;\n      if (currTile !== null) {\n        extraContent += 'M;';\n        moveValue = currTile;\n      }\n    } else if (prevMove === true) {\n      moveValue = currTile;\n      extraContent += 'moveT-M;';\n    } else {\n      baseValue = currTile;\n      extraContent += 'moveT-B;';\n    }\n    return [baseValue, moveValue, overlayValue, removeValue, moveDir, extraContent];\n\n  }\n\n  getTileValues(row, col, maxRow, maxCol, currState, prevState) {\n    let searchRow, searchCol;\n    let moveDir = this.props.animateUndo ? this.reverseDirection(prevState.movePos) : currState.movePos;\n    let [baseValue, moveValue, overlayValue, removeValue] = [null, null, null, null];\n    let isBaseCase = false;\n    let extraContent = '';\n\n    switch (moveDir) {\n      case 'up':\n        if (row >= maxRow) isBaseCase = true;\n        [searchRow, searchCol] = [row + 1, col];\n        break;\n      case 'right':\n        if (col <= 0) isBaseCase = true;\n        [searchRow, searchCol] = [row, col - 1];\n        break;\n      case 'down':\n        if (row <= 0) isBaseCase = true;\n        [searchRow, searchCol] = [row - 1, col];\n        break;\n      case 'left':\n        if (col >= maxCol) isBaseCase = true;\n        [searchRow, searchCol] = [row, col + 1];\n        break;\n      default:\n        isBaseCase = true;\n        break;\n    }\n\n    const currMove = currState.moveTiles[row][col];\n    const currMoveSearch = isBaseCase ? null : currState.moveTiles[searchRow][searchCol];\n    const currTile = currState.gameTiles[row][col];\n    const prevTile = prevState ? prevState.gameTiles[row][col] : null;\n    const prevTileSearch = (prevState && !isBaseCase) ? prevState.gameTiles[searchRow][searchCol] : null;\n\n    if (currMove === 'new') {\n      // new tile was added\n      overlayValue = currTile;\n      extraContent += 'new O;';\n    } else if (isBaseCase) {\n      extraContent += 'baseCase-';\n      if ((currMove === false) || (currMove === null)) {\n        baseValue = currTile;\n        extraContent += 'B;';\n      }\n    } else {\n      if ((currMoveSearch === true) || (currMoveSearch === 'new')) {\n        moveValue = prevTileSearch;\n        extraContent += 'searchT-M;';\n        if ((currMove === false) && (prevTile !== null)) {\n          // sum tiles at this location\n          baseValue = prevTile;\n          overlayValue = currTile;\n          extraContent += 'sum-BO;';\n        }\n      } else {\n        baseValue = currTile;\n        extraContent += 'searchF-B;';\n      }\n    }\n    return [baseValue, moveValue, overlayValue, removeValue, moveDir, extraContent];\n  }\n\n  render() {\n    const gameTiles = this.props.currentState.gameTiles;\n    const maxRow = gameTiles.length - 1;\n    const maxCol = gameTiles[0].length - 1;\n    const currState = this.props.currentState;\n    const prevState = this.props.previousState;\n    let baseValue, moveValue, overlayValue, removeValue, extraText, moveDir, key;\n\n    return (\n      <div className='Board'>\n        <div className='background'>\n          {gameTiles.map((x, rowNum) => (\n            <div className='game-row background' key={rowNum}>\n              {x.map((y, colNum) =>\n                <GameTile value={null}\n                          type='background'\n                          key={maxRow * rowNum + colNum} />\n              )}\n            </div>\n          ))}\n        </div>\n\n        <div className='game-board'>\n        {gameTiles.map((x, rowNum) => (\n          <div className='game-row' key={rowNum}>\n            {x.map((y, colNum) => {\n              [baseValue, moveValue, overlayValue, removeValue, moveDir, extraText] =\n                this.props.animateUndo ?\n                this.getUndoTileValues(rowNum, colNum, maxRow, maxCol, currState, prevState) :\n                this.getTileValues(rowNum, colNum, maxRow, maxCol, currState, prevState);\n              key = (maxRow * rowNum + colNum);\n              key += ((moveValue !== null) || (overlayValue !== null)) ? Math.random() : 0;\n              return (\n                <GameTile value={y}\n                          gameOver={this.props.gameOver}\n                          type='gamePiece'\n                          doAnimations={this.props.doAnimations}\n                          baseValue={baseValue}\n                          moveValue={moveValue}\n                          overlayValue={overlayValue}\n                          removeValue={removeValue}\n                          animateDirection={moveDir}\n                          debug={extraText}\n                          key={key}/>\n              );\n            })}\n          </div>\n        ))}\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { max, min } from 'lodash';\n\nexport default class PlotScatter extends React.Component {\n  getMarkersSubset (markers, maxNumMarkers) {\n    let skipLabel;\n\n    let div = markers.length / maxNumMarkers;\n    if (div <= 1) {\n      skipLabel = 1;\n    } else if (div <= 2) {\n      skipLabel = 2;\n    } else if (div <= 5) {\n      skipLabel = 5;\n    } else {\n      skipLabel = 10 * (Math.floor(div / 10) + 1);\n    }\n    let markersSubset = Array(Math.floor(markers.length / skipLabel)).fill(0);\n    return markersSubset.map((x, i) => markers[(i + 1) * skipLabel - 1]);\n  }\n\n  scatterPlotSize (minSize, maxSize, numPoints, plotWidth) {\n    let radius = min([maxSize, plotWidth / (numPoints * 3)]);\n    return max([radius, minSize]);\n  }\n\n  render() {\n    const svgWidth = this.props.svgWidth;\n    const svgHeight = this.props.svgHeight;\n    const xLabelHeight = 40;\n    const yLabelWidth = 40;\n    const legendHeight = 20;\n\n    const dataScatter = this.props.dataScatter;\n    const dataBar = this.props.dataBar;\n\n    const plotHeight = svgHeight - xLabelHeight - legendHeight;\n    const plotDataHeight = plotHeight - 10;\n\n    const xAxisMarkers = this.props.xAxisMarkers;\n    const yAxisMarkers = this.props.yAxisMarkers;\n\n    const yAxisMarkersSubset = this.getMarkersSubset(yAxisMarkers, Math.floor(plotHeight / 20));\n    const xAxisMarkersSubset = this.getMarkersSubset(xAxisMarkers, 10);\n\n    const viewBox = [0, 0, svgWidth, svgHeight].join(' ');\n    const yLabel = 'tile value';\n    const xLabel = 'move #';\n\n    const xPlotWidth = (svgWidth - yLabelWidth - 10) / dataBar.length;\n    const xPlot = (x) => xPlotWidth * x + 10 + yLabelWidth;\n    const yPlot = (y) => plotDataHeight * (yAxisMarkers.length - y) / (yAxisMarkers.length) + 10;\n    const rPlot = this.scatterPlotSize(2, 5, dataBar.length, (svgWidth - yLabelWidth - 10));\n\n    return (\n      <svg className='chart PlotScatter' viewBox={viewBox}>\n        <g className='plot' transform={'translate(0,' + legendHeight + ')'}>\n          <path className='max-values'\n            d={['M', [yLabelWidth, plotHeight].join(',')].join(' ') +\n            dataBar.map((x,i) => ' V' + yPlot(x + 1) + ' H' + xPlot(i + 1)) +\n            ' V' + plotHeight}\n          />\n\n          {dataScatter.map((x, i) =>\n            <g transform={'translate(' + xPlot(i) + ', 0)'} key={i}>\n              <circle className={'plot-' + x}\n                      cx={xPlotWidth / 2} cy={yPlot(x + 1)} r={rPlot} />\n            </g>\n          )}\n          <g className='axis'>\n            <line className='yAxis' key='yAxis'\n                  x1={yLabelWidth} y1='0'\n                  x2={yLabelWidth} y2={plotHeight} />\n            <line className='xAxis' key='xAxis'\n                  x1={yLabelWidth} y1={plotHeight}\n                  x2={svgWidth} y2={plotHeight} />\n            {yAxisMarkers.map(y =>\n              <line key={y} x1={yLabelWidth - 2} y1={yPlot(y + 1)}\n                            x2={yLabelWidth + 2} y2={yPlot(y + 1)} />\n            )}\n            {xAxisMarkers.map(x =>\n              <line key={x} x1={xPlot(x + 0.5)} y1={plotHeight - 2}\n                            x2={xPlot(x + 0.5)} y2={plotHeight + 2} />\n            )}\n          </g>\n          <g className='x-axis-label' transform={'translate(0, ' + (plotHeight) + ')'}>\n            {xAxisMarkersSubset.map(x =>\n              <text x={xPlot(x + 0.5)} y=\"14.5\" dy=\".35em\" key={x} className=\"axis-label\">\n                {this.props.xAxisLabels[x]}\n              </text>\n            )}\n            <text x={(svgWidth - yLabelWidth) / 2 + yLabelWidth} y={xLabelHeight - 9.5} dy=\".35em\" key=\"label\" className=\"axis-label\">\n              {xLabel}\n            </text>\n          </g>\n          <g className='y-axis-label'>\n            {yAxisMarkersSubset.map(y =>\n              <text x={yLabelWidth - 10} y={9.5 + yPlot(y + 1)} dy=\"-.35em\" key={y}>\n                {this.props.yAxisLabels[y]}\n              </text>\n            )}\n            <text x=\"9.5\" y={(plotHeight) / 2} key=\"label\" className=\"axis-label\"\n                  transform={\"rotate(\" + [-90, 9.5, (plotHeight) / 2].join(',') + \")\"}>\n              {yLabel}\n            </text>\n          </g>\n        </g>\n\n        <g transform={'translate(' + (yLabelWidth + 20) + ',0)'} className='legend'>\n          <g transform='translate(0, 0)'>\n            <circle className='plot-0' cx='5' cy='9.5' r={rPlot} />\n            <circle className='plot-1' cx='15' cy='9.5' r={rPlot} />\n            <circle cx='25' cy='9.5' r={rPlot} />\n            <text x='40' y='9.5' dy='.35em'>new tile</text>\n          </g>\n          <g transform='translate(140, 0)'>\n            <rect className='max-values' width='30' height='20' y='0'></rect>\n            <text x='40' y='9.5' dy='.35em'>max board value</text>\n          </g>\n        </g>\n      </svg>\n    );\n  }\n\n}\n","import React from 'react';\nimport { max } from 'lodash';\n\nexport default class PlotHorizontalBar extends React.Component {\n\n  render() {\n    const data = this.props.data;\n    const dataLabels = this.props.dataLabels;\n    const axisMarkers = this.props.axisMarkers;// [0, 25, 50, 75, 100];\n    const axisUnit = this.props.axisUnit;//'%';\n    const barHeight = 20;\n    const labelHeight = 20;\n    const svgWidth = this.props.svgWidth; //800;\n    const svgHeight = data.length * barHeight + labelHeight;\n    const position = (i) => 'translate(0, ' + (i * barHeight + labelHeight + 3) + ')';\n    const labelWidth = 50;\n    const maxBarWidth = svgWidth - labelWidth - 1;\n    const scaledNum = (i, values) => (maxBarWidth * values[i] / max(axisMarkers));\n    const viewBox = [0, 0, svgWidth, svgHeight].join(' ');\n    const offset = 5;\n\n    return (\n      <svg className='chart PlotHorizontalBar' viewBox={viewBox}>\n        {dataLabels.map((label, i) =>\n          <g transform={position(i)} key={label}>\n            <rect width={scaledNum(i, data)} height=\"18\" x={labelWidth}></rect>\n            <text x={labelWidth - offset} y=\"9.5\" dy=\".35em\">{label}</text>\n          </g>\n        )}\n        <g className='axis'>\n          <line x1='0' y1={labelHeight} x2={svgWidth} y2={labelHeight}/>\n          {axisMarkers.map((x, i) =>\n            <line x1={labelWidth + scaledNum(i,axisMarkers)} y1='0'\n                  x2={labelWidth + scaledNum(i,axisMarkers)} y2={svgHeight}\n                  key={'axis-' + x}/>\n          )}\n        </g>\n        <g className='axis-label' transform={'translate('+labelWidth+', 0)'}>\n          {axisMarkers.map((x, i) =>\n            <text x={scaledNum(i,axisMarkers) - offset} y=\"9.5\" dy=\".35em\" key={'label-' + x}>\n              {x + axisUnit}\n            </text>\n          )}\n        </g>\n      </svg>\n    );\n  }\n}\n","import React from 'react';\nimport { sum, max } from 'lodash';\nimport calculateDisplayValue from './calculateDisplayValue.js';\nimport PlotScatter from './plotScatter.js';\nimport PlotHorizontalBar from './plotHorizontalBar.js';\n\nexport default class Tabs extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentTab: null,\n    };\n  }\n\n  items() {\n    const classTabContent = 'tab-content';\n    return [\n      {\n        name: 'instructions',\n        title: 'Instructions',\n        content: (() =>\n          <div className={classTabContent}>\n            <h2>Instructions for play</h2>\n            <p>The goal of Trois is to maximize your score by combining as many\n              tiles as possible.</p>\n            <p>Click on the arrow keys to slide all tiles on the board one space in the specified direction.\n              Tiles remain within the game borders; the borders act like walls that tiles are unable to pass through.</p>\n            <p>White tiles are multiples of 3. If a white tile is pushed into a stationary tile of the same value,\n              then the tiles will combine into one tile, and their values will add.</p>\n            <p>Orange and blue tiles are special. An orange tile will always have a value of 1,\n              and a blue tile will always have a value of 2. An orange tile can\n              only be combined with a blue tile (and vice versa).</p>\n            <p>Remember, everything is based around the number 3!</p>\n            <ul>\n              <li>1 + 2 = 3</li>\n              <li>3 + 3 = 6</li>\n              <li>6 + 6 = 12</li>\n              <li>etc.</li>\n            </ul>\n            <p>After every move, a new tile is randomly placed onto the board.\n              The value of this tile is randomly chosen, and cannot be larger\n              than the largest-value tile already on the board.</p>\n\n            <h3>Game over</h3>\n            <p>The game ends when no more moves can be made.</p>\n\n            <h3>Scoring</h3>\n            <p>Your score is the sum of the scores of every tile on the board.</p>\n            <p>Tiles with a value of 1 or 2 have a score of 0.</p>\n            <p>For all other tiles, the displayed value and score are calculated\n              based on an assigned rank. For example:</p>\n            <table className='example'>\n              <thead><tr>\n                <th>Tile rank</th>\n                <th>Tile val<span className='wide'>ue</span></th>\n                <th>Val<span className='wide'>ue</span> calc<span className='wide'>ulation</span></th>\n                <th>Tile score</th>\n                <th>Score calc<span className='wide'>ulation</span></th>\n              </tr></thead>\n              <tbody>\n                <tr>\n                  <td>0</td>\n                  <td>3</td>\n                  <td>3 &#215; 2 ^ 0</td>\n                  <td>3</td>\n                  <td>3 ^ 1</td>\n                </tr>\n                <tr>\n                  <td>1</td>\n                  <td>6</td>\n                  <td>3 &#215; 2 ^ 1</td>\n                  <td>9</td>\n                  <td>3 ^ 2</td>\n                </tr>\n                <tr>\n                  <td>2</td>\n                  <td>12</td>\n                  <td>3 &#215; 2 ^ 2</td>\n                  <td>27</td>\n                  <td>3 ^ 3</td>\n                </tr>\n                <tr>\n                  <td>3</td>\n                  <td>24</td>\n                  <td>3 &#215; 2 ^ 3</td>\n                  <td>81</td>\n                  <td>3 ^ 4</td>\n                </tr>\n              </tbody>\n            </table>\n            <p>In the general case, the equations are as follows:</p>\n            <table className='general'>\n              <thead>\n                <tr>\n                  <th>Tile rank</th>\n                  <th>Value equation</th>\n                  <th>Score equation</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr>\n                  <td>x</td>\n                  <td>3 &#215; 2 ^ x</td>\n                  <td>3 ^ (x + 1)</td>\n                </tr>\n              </tbody>\n            </table>\n\n          </div>),\n      },\n      {\n        name: 'statistics',\n        title: 'Statistics',\n        content: (() =>\n          <div className={classTabContent}>\n            <h2>Game statistics</h2>\n            <h3>Frequency of new tiles</h3>\n            <p>New tiles are randomly selected from a list of all tiles less than or equal to the largest tile on the board.</p>\n            {this.drawNewTiles()}\n            <h3>Moves and game style</h3>\n            <p>This is a summary of all played moves:</p>\n            {this.drawMoves()}\n          </div>),\n      },\n      {\n        name: 'about',\n        title: 'About',\n        content: (() =>\n          <div className={classTabContent}>\n            <h2>About Trois</h2>\n            <p>Trois is my personal learning project; it\n              is the first project that I&#8217;ve built in React (excluding\n              the <a href='https://reactjs.org/tutorial/tutorial.html'>official tutorial</a>).\n              For project inspiration, I turned to my favorite iOS game, Threes!.</p>\n            <p>Source code for the project is on <a href='https://github.com/lemonnish/trois'>Github</a>.</p>\n            <p>The technical writeup is located\n              on <a href='https://www.laurennishizaki.com/projects/2018/09/trois/'>my personal website</a>.\n            </p>\n          </div>),\n      },\n    ]\n  }\n\n  drawMoves() {\n    let count = [0, 0, 0, 0]; // [up, right, down, left]\n    const history = this.props.history.slice(0, this.props.stepNumber + 1);\n    history.forEach(move => {\n      switch (move.movePos) {\n        case 'up':\n          count[0] += 1;\n          break;\n        case 'right':\n          count[1] += 1;\n          break;\n        case 'down':\n          count[2] += 1;\n          break;\n        case 'left':\n          count[3] += 1;\n          break;\n        default:\n          break;\n      }\n    });\n    const scaledCount = count.map((x) => sum(count) === 0 ? 0 : x * 100 / sum(count));\n\n    return (\n      <PlotHorizontalBar\n          data={scaledCount}\n          dataLabels={['up', 'right', 'down', 'left']}\n          axisMarkers={[0, 25, 50, 75, 100]}\n          axisUnit='%'\n          svgWidth={800} />\n    );\n  }\n\n  drawNewTiles() {\n    const history = this.props.history.slice(0, this.props.stepNumber);\n    const newTiles = history.map(move => move.nextTile);\n    const maxValues = (history.length === 0) ?\n      [] :\n      history.map(move => max(move.gameTiles.map(x => max(x))));\n\n    const xAxisMarkers = newTiles.map((x, i) => i);\n    const yAxisMarkers = (maxValues.length === 0) ? [0, 1] : Array(max(maxValues) + 1).fill(0).map((x, i) => i);\n    const xAxisLabels = xAxisMarkers.map(x => x + 1);\n    const yAxisLabels = yAxisMarkers.map(x => calculateDisplayValue(x));\n\n    return (\n      <PlotScatter\n          xAxisMarkers={xAxisMarkers}\n          yAxisMarkers={yAxisMarkers}\n          xAxisTitle='move #'\n          yAxisTitle='tile value'\n          xAxisLabels={xAxisLabels}\n          yAxisLabels={yAxisLabels}\n          dataScatter={newTiles}\n          dataBar={maxValues}\n          svgWidth={800}\n          svgHeight={200}\n          />\n    );\n  }\n\n  onTabClick(i) {\n    let newTab = null;\n    if (this.state.currentTab !== i) newTab = i;\n    this.setState({\n      currentTab: newTab,\n    });\n  }\n\n  renderTabButton(x, i) {\n    let classNames = x.name;\n    if (this.state.currentTab === i) classNames += ' active';\n    const title = (this.state.currentTab === i ? 'Hide' : 'Show') + ' ' + x.name;\n    return (\n      <button className={classNames} key={i} title={title} onClick={() => this.onTabClick(i)}>\n        {x.title}\n      </button>\n    )\n  }\n\n  renderContent(tabNum) {\n    if (tabNum !== null) {\n      const tabValues = this.items();\n      return tabValues[tabNum].content();\n    } else {\n      return null;\n    }\n  }\n\n  // props = state\n  render() {\n    let classTabButtons = 'tab-buttons';\n    if (this.state.currentTab !== null) classTabButtons += ' active';\n    return (\n      <div className='Tabs'>\n        <div className={classTabButtons}>\n          {this.items().map((x, i) => this.renderTabButton(x,i))}\n        </div>\n        {this.renderContent(this.state.currentTab)}\n      </div>\n    )\n  }\n}\n","import React from 'react';\n\nexport default function Icon(iconName, optClass) {\n  const className = (optClass === undefined) ? 'Icon' : ('Icon ' + optClass);\n  const pathName = './static/feather-sprite.svg#' + iconName;\n  return (\n    <svg className={className}>\n      <use xlinkHref={pathName}/>\n    </svg>\n  )\n}\n","import React from 'react';\nimport Icon from './icon.js';\n\nexport default function GameControl(props) {\n  const direction = ['up', 'right', 'down', 'left'];\n  const shortcut = ['W', 'D', 'S', 'A'];\n  const featherName = ['arrow-up', 'arrow-right', 'arrow-down', 'arrow-left'];\n  const keyboardShortcut = ((dir) => {\n    if (props.showKeyboardShortcuts) {\n      return (\n        <span className='keyboardShortcut'>\n          {shortcut[dir]}\n        </span>\n      )\n    } else { return null }\n  });\n\n  return (\n    <div className='GameControl'>\n      {direction.map((dir, i) => (\n        <button className={dir}\n                onClick={() => props.onClick(dir)}\n                disabled={props.possibleMove[dir]===null}\n                title={'Move tiles ' + dir}\n                key={dir}>\n          {Icon(featherName[i])}\n          {keyboardShortcut(i)}\n        </button>\n      ))}\n    </div>\n  )\n}\n","import React from 'react';\nimport calculateScore from './calculateScore.js';\nimport Icon from './icon.js';\nimport GameTile from './gameTile.js';\nimport GameControl from './gameControl.js';\n\nexport default class Dashboard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showKeyboardShortcuts: true,\n    };\n  }\n\n  renderStatus(gameTiles, nextTileValue) {\n    const sum = (a,b) => a + b;\n    const scoreSum = gameTiles.map(x => x.map(y => calculateScore(y)).reduce(sum)).reduce(sum);\n    const scorePrint = scoreSum.toLocaleString();\n    const nextTile = (() => {\n      if (this.props.possibleMoves.gameOver) {\n        return (\n          <div className='next-tile'>\n            <span className='game-over'>No remaining moves!</span>\n          </div>\n        )\n      } else {\n        return (\n          <div className='next-tile'>\n            <label>Next tile</label>\n            <GameTile\n              value={nextTileValue}\n              gameOver={false}\n              key='nextTile'\n              type='nextTile'\n            />\n          </div>\n        )\n      }\n    });\n\n    return (\n      <div className='game-status'>\n        {nextTile()}\n        <div className='score'>\n          <label>Score</label>\n          <span className='score'>{scorePrint}</span>\n        </div>\n      </div>\n    );\n  }\n\n  renderToggleShortcuts() {\n    const iconVisible = this.state.showKeyboardShortcuts ? 'eye-off' : 'eye';\n    const toggleView = (() => {\n      let showKeyboardShortcuts = this.state.showKeyboardShortcuts;\n      this.setState({\n        showKeyboardShortcuts: !showKeyboardShortcuts,\n      });\n    });\n    const title = (this.state.showKeyboardShortcuts ? 'Hide' : 'Show') + ' keyboard shortcuts';\n    return (\n      <button className='toggleShortcuts'\n              onClick={() => toggleView()}\n              title={title}>\n        {Icon(iconVisible)}\n        <span>ABC</span>\n      </button>\n    )\n  }\n\n  renderUndo(history, stepNumber) {\n    const keyboardShortcut = (() => {\n      if (this.state.showKeyboardShortcuts) {\n        return (\n          <span className='keyboardShortcut'>U</span>\n        )\n      } else { return null }\n    });\n\n    return (\n      <button className='undo'\n              onClick={this.props.undoClick}\n              disabled={stepNumber <= 0}\n              title='Undo last move'\n              key='undoButton'>\n        Undo last move\n        {keyboardShortcut()}\n      </button>\n    );\n  }\n\n  renderRestart() {\n    return (\n      <button className='restart'\n              onClick={this.props.restartClick}\n              title='Restart game'>\n        Restart\n      </button>\n    );\n  }\n\n  render() {\n    const state = this.props.state;\n    const current = state.history[state.stepNumber].gameTiles;\n    const nextTile = state.history[state.stepNumber].nextTile;\n    const history = state.history;\n\n    return (\n      <div className='Dashboard'>\n        {this.renderStatus(current, nextTile)}\n        <GameControl\n          possibleMove={this.props.possibleMoves}\n          onClick={this.props.controllerClick}\n          showKeyboardShortcuts={this.state.showKeyboardShortcuts}\n        />\n        {this.renderUndo(history, state.stepNumber)}\n        {this.renderToggleShortcuts()}\n        {this.renderRestart()}\n      </div>\n    )\n  }\n}\n","import React from 'react';\nimport Header from './header.js';\nimport Board from './board.js';\nimport Tabs from './tabs.js';\nimport Dashboard from './dashboard.js';\nimport Test from './test.js';\n\n\nimport { shuffle, max } from 'lodash';\nvar Mousetrap = require('mousetrap');\n\nexport default class Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      width: 4,\n      height: 4,\n      history: [{\n        gameTiles: this.getStartTiles(4,4),\n        moveTiles: createArray(4,4,null),\n        movePos: null,\n        nextTile: Test.isType('noNewTiles') ? null : Math.round(Math.random()),\n      }],\n      stepNumber: 0,\n      prevStepNumber: null,\n      doAnimations: true,\n    };\n  }\n\n  getStartTiles(width, height) {\n    let startValues;\n    let iters = Array(width * height).fill(0).map((x,i) => i);\n    let randomizeTiles = true;\n    let startArray = createArray(height, width, null);\n    const isEven = ((num) => num % 2 === 0);\n\n    if (Test.isType('noMovesLeft')) {\n      startValues = Array(width * height).fill(0);\n      if (Test.isType('largeStartValues')) {\n        startValues = startValues.map((x, i) => i === 0 ? 3 : i - 1);\n      } else if (!Test.isType('allOnes')) {\n        randomizeTiles = false;\n        startValues = startValues.map((x, i) => isEven(width) ?\n          ((isEven(i) === isEven(Math.floor(i / width))) ? 3 : 4) :\n          (isEven(i) ? 3 : 4));\n      }\n    } else if (Test.isType('largeStartValues')) {\n      randomizeTiles = false;\n      startValues = iters.map((x, i) => i === 0 ? null : i - 1);\n    } else {\n      startValues = (Test.isType('allOnes') ? [0, 0, 0, 0, 0, 0] : [0, 0, 0, 1, 1, 1]);\n    }\n\n    if (randomizeTiles) iters = shuffle(iters);\n    startValues.forEach((x, i) => {\n      startArray[Math.floor(iters[i]/height)][iters[i] % width] = x;\n    })\n    return startArray;\n  }\n\n  getNextTile(gameTiles, direction) {\n    const maxCurrentTile = max(gameTiles.map(x => max(x)));\n    const nextTile = Test.isType('noNewTiles') ? null : (\n      (maxCurrentTile === 0) ?\n      0 : shuffle(Array(maxCurrentTile).fill(0).map((x,i) => i))[0]);\n    let nullTiles = [];\n\n    const height = this.state.height;\n    const width = this.state.width;\n\n    switch (direction) {\n      case 'up':\n        gameTiles[height - 1].forEach((x, colNum) => {\n          if (x === null) nullTiles.push((height - 1) * width + colNum);\n        });\n        break;\n      case 'right':\n        gameTiles.forEach((x, rowNum) => {\n          if (x[0] === null) nullTiles.push(rowNum * width + 0);\n        });\n        break;\n      case 'down':\n        gameTiles[0].forEach((x, colNum) => {\n          if (x === null) nullTiles.push(colNum);\n        });\n        break;\n      case 'left':\n        gameTiles.forEach((x, rowNum) => {\n          if (x[width - 1] === null) nullTiles.push((rowNum + 1) * width - 1);\n        });\n        break;\n      default:\n        return null;\n    }\n\n    if (nullTiles.length === 0) {\n      gameTiles.forEach((x, rowNum) => {\n        x.forEach((y, colNum) => {\n          if (y === null) nullTiles.push(rowNum * width + colNum);\n        });\n      });\n    }\n\n    const pos = shuffle(nullTiles)[0];\n\n    const row = Math.floor(pos / this.state.height);\n    const col = pos % this.state.width;\n    return [row, col, nextTile];\n  }\n\n  allPossibleMoves(gameTiles) {\n    // return an object will all legal moves\n    //  if no movement possible: .up = null\n    //  if movement possible: .up.movement = which tiles will move\n    //                        .up.nextState = board state after movement\n    //  .gameOver = [boolean] any moves remaining\n    let moves = {\n      up: this.possibleMove(gameTiles, 'up'),\n      right: this.possibleMove(gameTiles, 'right'),\n      down: this.possibleMove(gameTiles, 'down'),\n      left: this.possibleMove(gameTiles, 'left'),\n    };\n    const gameOver = Object.values(moves).every(x => x === null);\n    moves.gameOver = gameOver;\n    return moves;\n  }\n\n  moveLogic(currTile, prevTile, checkState, loopNum, lastLoop) {\n    let newCurrTile = null, newPrevTile = null;\n    let movement = false;\n    let standardTiles, miniTiles;\n\n    if (loopNum > 0 && checkState === false && currTile !== null) { // move curr tile into prev tile spot\n      movement = true;\n      newPrevTile = currTile;\n    } else if (loopNum > 0 && checkState) { // check tiles\n      standardTiles = (currTile > 1) && (currTile === prevTile);\n      miniTiles = (currTile === 0 && prevTile === 1) || (currTile === 1 && prevTile === 0);\n      if ((standardTiles && (currTile === prevTile)) || miniTiles) {\n        // combine prev and curr tiles in prev tile location\n        movement = true;\n        newPrevTile = miniTiles ? 2 : currTile + 1;\n        checkState = false;\n      } else {// copy prev value into new array\n        newPrevTile = prevTile;\n      }\n    }\n    if (lastLoop && checkState) { // last row\n      newCurrTile = currTile;\n    }\n    checkState = checkState ? currTile !== null : false;\n\n    return [newCurrTile, newPrevTile, movement, checkState];\n  }\n\n  possibleMove(gameTiles, direction) {\n    // helper to allPossibleMoves()\n    // given game board and direction, figure out what the new board looks like\n    //  if no movement possible, return: null\n    //  if movement possible, return: .movement = which tiles will move\n    //                                .nextState = board state after movement\n    const numRows = gameTiles.length;\n    const numCols = gameTiles[0].length;\n    let movement = createArray(numRows, numCols, false);\n    let nextState = createArray(numRows, numCols, null);\n    let movementPossible = false;\n    let currTile, prevTile;\n    let gameLogic;\n    let loopNum, lastLoop;\n    let checkState;\n\n    switch (direction) {\n      case 'up':\n        // check state of every col\n        // if true, check if row can be combined with prev row\n        // if false, that tile will be moved\n        checkState = new Array(numCols).fill(true);\n        for (let row=0; row < numRows; row++) {\n          loopNum = row;\n          lastLoop = row === (numRows - 1);\n          for (let col=0; col < numCols; col++) {\n            currTile = gameTiles[row][col];\n            prevTile = (row > 0) ? gameTiles[row-1][col] : null;\n            gameLogic = this.moveLogic(currTile, prevTile, checkState[col], loopNum, lastLoop);\n            if (lastLoop) nextState[row][col] = gameLogic[0];\n            if (row > 0) nextState[row-1][col] = gameLogic[1];\n            movementPossible = movementPossible ? true : gameLogic[2];\n            movement[row][col] = gameLogic[2];\n            checkState[col] = gameLogic[3];\n          }\n        }\n        break;\n\n      case 'right':\n        checkState = new Array(numRows).fill(true);\n        for (let col=numCols-1; col>=0; col--) {\n          loopNum = numCols - col - 1;\n          lastLoop = col === 0;\n          for (let row=0; row<numRows; row++) {\n            currTile = gameTiles[row][col];\n            prevTile = (col < numCols - 1) ? gameTiles[row][col+1] : null;\n            gameLogic = this.moveLogic(currTile, prevTile, checkState[row], loopNum, lastLoop);\n            if (lastLoop) nextState[row][col] = gameLogic[0];\n            if (col < numCols-1) nextState[row][col+1] = gameLogic[1];\n            movementPossible = movementPossible ? true : gameLogic[2];\n            movement[row][col] = gameLogic[2];\n            checkState[row] = gameLogic[3];\n          }\n        }\n        break;\n\n      case 'down':\n        checkState = new Array(numCols).fill(true);\n        for (let row=numRows-1; row>=0; row--) {\n          loopNum = numRows - row - 1;\n          lastLoop = row === 0;\n          for (let col=0; col<numCols; col++) {\n            currTile = gameTiles[row][col];\n            prevTile = (row < numRows - 1) ? gameTiles[row+1][col] : null;\n            gameLogic = this.moveLogic(currTile, prevTile, checkState[col], loopNum, lastLoop);\n            if (lastLoop) nextState[row][col] = gameLogic[0];\n            if (row < numRows-1) nextState[row+1][col] = gameLogic[1];\n            movementPossible = movementPossible ? true : gameLogic[2];\n            movement[row][col] = gameLogic[2];\n            checkState[col] = gameLogic[3];\n          }\n        }\n        break;\n\n      case 'left':\n        checkState = new Array(numRows).fill(true);\n        for (let col=0; col < numCols; col++) {\n          loopNum = col;\n          lastLoop = col === (numCols - 1);\n          for (let row=0; row < numRows; row++) {\n            currTile = gameTiles[row][col];\n            prevTile = (col > 0) ? gameTiles[row][col-1] : null;\n            gameLogic = this.moveLogic(currTile, prevTile, checkState[row], loopNum, lastLoop);\n            if (lastLoop) nextState[row][col] = gameLogic[0];\n            if (col > 0) nextState[row][col-1] = gameLogic[1];\n            movementPossible = movementPossible ? true : gameLogic[2];\n            movement[row][col] = gameLogic[2];\n            checkState[row] = gameLogic[3];\n          }\n        }\n        break;\n      default:\n        return null;\n    }\n    if (movementPossible) {\n      return {movement: movement, nextState: nextState};\n    } else {\n      return null;\n    }\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0,this.state.stepNumber + 1);\n    const current = history[this.state.stepNumber];\n    const possibleMoves = this.allPossibleMoves(current.gameTiles);\n\n    if (possibleMoves[i] === null) {\n      return;\n    }\n    let newGameTiles = possibleMoves[i].nextState;\n    let movement = possibleMoves[i].movement;\n    let [row, col, nextTile] = this.getNextTile(newGameTiles, i);\n    newGameTiles[row][col] = current.nextTile;\n    movement[row][col] = 'new';\n    this.setState({\n      history: history.concat([{\n        gameTiles: newGameTiles,\n        moveTiles: movement,\n        movePos: i,\n        nextTile: nextTile,\n      }]),\n      stepNumber: history.length,\n      prevStepNumber: history.length - 1,\n    });\n  }\n\n  handleUndoClick() {\n    const stepNumber = this.state.stepNumber;\n    if (stepNumber < 1) {\n      return;\n    } else {\n      this.setState({\n        stepNumber: stepNumber - 1,\n        prevStepNumber: stepNumber,\n      });\n    }\n  }\n\n  handleRestartClick() {\n    this.setState({\n      history: [{\n        gameTiles: this.getStartTiles(4,4), //[[0,null,0,1],[null,null,null,null],[null,0,null,null],[null,null,1,null]],\n        moveTiles: createArray(4,4,null),\n        movePos: null,\n        nextTile: Math.round(Math.random()),\n      }],\n      stepNumber: 0,\n      prevStepNumber: null,\n    });\n  }\n\n  handleKeypress() {\n    Mousetrap.bind('w', () => this.handleClick('up') );\n    Mousetrap.bind('d', () => this.handleClick('right') );\n    Mousetrap.bind('s', () => this.handleClick('down') );\n    Mousetrap.bind('a', () => this.handleClick('left') );\n    Mousetrap.bind('u', () => this.handleUndoClick() );\n  }\n\n  render() {\n    const stepNum = this.state.stepNumber;\n    const prevStepNum = this.state.prevStepNumber;\n    const currentState = this.state.history[stepNum];\n    const previousState = (prevStepNum !== null) ? this.state.history[prevStepNum] : null;\n    const drawUndo = prevStepNum > stepNum;\n\n    const possibleMoves = this.allPossibleMoves(currentState.gameTiles);\n    this.handleKeypress();\n\n    return (\n      <div className='Game'>\n        <Header/>\n        <Board\n          currentState={currentState}\n          previousState={previousState}\n          gameOver={possibleMoves.gameOver}\n          doAnimations={this.state.doAnimations}\n          animateUndo={drawUndo}\n        />\n        <Dashboard\n          state={this.state}\n          controllerClick={(i) => this.handleClick(i)}\n          undoClick={() => this.handleUndoClick()}\n          possibleMoves={possibleMoves}\n          restartClick={() => this.handleRestartClick()}\n        />\n        <Tabs\n          history={this.state.history}\n          stepNumber={this.state.stepNumber}\n        />\n      </div>\n    );\n  }\n}\n\nfunction createArray(numRows, numCols, value) {\n  let arr = new Array(numRows);\n  for (let i=0; i<numRows; i++) {\n    arr[i] = new Array(numCols).fill(value);\n  }\n  return arr;\n}\n","import \"babel-polyfill\";\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Game from './components/game.js';\n\nimport './index.css';\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('trois-game')\n);\n"],"sourceRoot":""}